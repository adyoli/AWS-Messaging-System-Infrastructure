name: Deploy Messaging System Infrastructure

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:
  terraform:
    name: "Terraform CI/CD"
    runs-on: ubuntu-latest
    env:
      # This is a best practice for non-interactive runs
      TF_IN_AUTOMATION: true
      # Pass DB password as a secret
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # --- Terraform: Prepare and Plan Infrastructure ---
      # Ensure all AWS resources (ECR, ECS, ALB, etc.) exist and are up-to-date before building and pushing the Docker image.
      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="terraform.tfvars"

      # --- Docker Build & Push: Hardened Flask App ---
      # Build and push the Docker image after confirming infra plan, but before apply.
      # The Dockerfile uses a multi-stage build, pinned dependencies, and a dedicated non-root user for security.
      # The image is tagged with both 'latest' and the commit SHA, and pushed to ECR for ECS deployment.
      - name: Build and Push Docker Image
        # This step runs for pushes to both master and develop branches
        if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
        run: |
          echo "REPO=863518437902.dkr.ecr.us-east-1.amazonaws.com/bonmoja-assessment-repo" >> $GITHUB_ENV
          echo "SHA_TAG=$(echo $GITHUB_SHA | head -c 7)" >> $GITHUB_ENV
          echo "Building image with tag: ${{ env.SHA_TAG }}"
          echo "Pushing to ECR repository: ${{ env.REPO }}"
          
          # Ensure ECR repository exists
          # aws ecr describe-repositories --repository-names bonmoja-assessment-repo --region us-east-1 || aws ecr create-repository --repository-name bonmoja-assessment-repo --region us-east-1
          
          # Login to ECR first (before any Docker operations)
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.REPO }}
          
          # Try to authenticate with Docker Hub (optional, for rate limit avoidance)
          # echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin || echo "Docker Hub auth failed, continuing with anonymous pulls"
          
          # Build the image
          docker build -t my-flask-app .
          
          # Tag and push images
          docker tag my-flask-app:latest ${{ env.REPO }}:latest
          docker tag my-flask-app:latest ${{ env.REPO }}:${{ env.SHA_TAG }}
          docker push ${{ env.REPO }}:latest
          docker push ${{ env.REPO }}:${{ env.SHA_TAG }}

      # --- Terraform: Apply Infrastructure Changes ---
      # Apply infrastructure changes, including updating ECS to use the new image.
      # Only apply on master branch pushes to avoid accidental infrastructure changes from develop.
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve -input=false -var-file="terraform.tfvars" -var="ecs_image_uri=${{ env.REPO }}:${{ env.SHA_TAG }}"

      # --- Post-Deploy Health Check ---
      # After deployment, run a health check against the ALB endpoint to verify the service is up.
      # Only run health checks on master branch deployments.
      - name: Run Post-Deploy Health Check
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          pip install requests
          URL=$(terraform output -raw alb_dns_name)
          echo "ALB URL: $URL"
          python scripts/health_check.py "http://$URL"

