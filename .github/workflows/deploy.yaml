name: Deploy Messaging System Infrastructure

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  # Global environment variables
  AWS_REGION: us-east-1
  ECR_REPOSITORY: aws-messaging-system-infra-repo
  ECR_REGISTRY: 863518437902.dkr.ecr.us-east-1.amazonaws.com

jobs:
  terraform:
    name: "Terraform CI/CD"
    runs-on: ubuntu-latest
    env:
      # Terraform automation settings
      TF_IN_AUTOMATION: true
      # Pass DB password as a secret
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    steps:
      # --- Code Checkout ---
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Terraform Setup ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # --- AWS Authentication ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # --- Infrastructure Validation ---
      # Ensure all AWS resources (ECR, ECS, ALB, etc.) exist and are up-to-date before building and pushing the Docker image.
      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="terraform.tfvars"

      # --- Docker Image Build & Push ---
      # Build and push the Docker image after confirming infra plan, but before apply.
      # The Dockerfile uses a multi-stage build, pinned dependencies, and a dedicated non-root user for security.
      # The image is tagged with both 'latest' and the commit SHA, and pushed to ECR for ECS deployment.
      - name: Build and Push Docker Image
        if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
        env:
          REPO: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
        run: |
          # Calculate short SHA for image tagging
          SHORT_SHA=$(echo ${{ github.sha }} | head -c 7)
          echo "üöÄ Building image with tag: $SHORT_SHA"
          echo "üì¶ Pushing to ECR repository: $REPO"
          
          # Ensure ECR repository exists
          echo "üîç Checking ECR repository..."
          aws ecr describe-repositories \
            --repository-names ${{ env.ECR_REPOSITORY }} \
            --region ${{ env.AWS_REGION }} \
            || aws ecr create-repository \
              --repository-name ${{ env.ECR_REPOSITORY }} \
              --region ${{ env.AWS_REGION }}
          
          # Authenticate with ECR
          echo "üîê Authenticating with ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          
          # Build Docker image
          echo "üèóÔ∏è Building Docker image..."
          docker build -t aws-messaging-flask-app .
          
          # Tag images
          echo "üè∑Ô∏è Tagging images..."
          docker tag aws-messaging-flask-app:latest $REPO:latest
          docker tag aws-messaging-flask-app:latest $REPO:$SHORT_SHA
          
          # Push images
          echo "üì§ Pushing images to ECR..."
          docker push $REPO:latest
          docker push $REPO:$SHORT_SHA
          
          echo "‚úÖ Docker image build and push completed successfully!"

      # --- Infrastructure Deployment ---
      # Apply infrastructure changes, including updating ECS to use the new image.
      # Only apply on master branch pushes to avoid accidental infrastructure changes from develop.
      - name: Deploy Infrastructure
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        env:
          REPO: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | head -c 7)
          echo "üöÄ Deploying infrastructure with image: $REPO:$SHORT_SHA"
          
          terraform apply \
            -auto-approve \
            -input=false \
            -var-file="terraform.tfvars" \
            -var="ecs_image_uri=$REPO:$SHORT_SHA"
          
          echo "‚úÖ Infrastructure deployment completed!"

      # --- Post-Deployment Health Check ---
      # After deployment, run a health check against the ALB endpoint to verify the service is up.
      # Only run health checks on master branch deployments.
      - name: Health Check
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          echo "üè• Running post-deployment health check..."
          
          # Install required packages
          pip install requests
          
          # Get ALB URL and run health check
          ALB_URL=$(terraform output -raw alb_dns_name)
          echo "üåê ALB URL: $ALB_URL"
          
          python scripts/health_check.py "http://$ALB_URL"
          
          echo "‚úÖ Health check completed successfully!"

